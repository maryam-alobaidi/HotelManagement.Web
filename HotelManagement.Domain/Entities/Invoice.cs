using HotelManagement.Domain.Enums;

namespace HotelManagement.Domain.Entities
{
    public  class Invoice
    {
        public int InvoiceID { get;  set; }
        public int BookingID { get;  set; }
        public int CustomerID { get;  set; }
        public DateTime? InvoiceDate { get;  set; }
        public decimal TotalAmount { get;  set; }
        public decimal? AmountPaid { get;  set; }
        public decimal? BalanceDue => TotalAmount - AmountPaid; 
        public int GeneratedByEmployeeID { get;  set; }

        public InvoiceStatusEnum InvoiceStatus { get;  set; }
        public  Booking? booking { get; set; }

        public Customer? customer { get; set; }

        public Employee? employee { get; set; }



        //for creating a new invoice
        public Invoice(int bookingID, int customerID, decimal totalAmount, int generatedByEmployeeID)
        {
            // --- Validation ---
            if (bookingID <= 0) throw new ArgumentException("Booking ID must be a positive integer.", nameof(bookingID));
            if (customerID <= 0) throw new ArgumentException("Customer ID must be a positive integer.", nameof(customerID));
            if (totalAmount <= 0) throw new ArgumentException("Total amount must be greater than zero for a new invoice.", nameof(totalAmount));
            if (generatedByEmployeeID <= 0) throw new ArgumentException("Generated by Employee ID must be a positive integer.", nameof(generatedByEmployeeID));
          
            // --- Assignment of initial properties ---
            BookingID = bookingID;
            CustomerID = customerID;
            InvoiceDate = DateTime.UtcNow; // Set to current UTC date/time when generated
            TotalAmount = totalAmount;
            AmountPaid = 0; // A new invoice starts with 0 paid
          
            InvoiceStatus =InvoiceStatusEnum.Unpaid;
            GeneratedByEmployeeID = generatedByEmployeeID;
        }

        public Invoice(int invoiceID, int bookingID, int customerID, DateTime? invoiceDate, decimal totalAmount, decimal? amountPaid, int generatedByEmployeeID, InvoiceStatusEnum invoiceStatus)
        {
            InvoiceID = invoiceID;
            BookingID = bookingID;
            CustomerID = customerID;
            InvoiceDate = invoiceDate;
            TotalAmount = totalAmount;
            AmountPaid = amountPaid;
            GeneratedByEmployeeID = generatedByEmployeeID;
            this.InvoiceStatus = invoiceStatus;
            
        }


        //for retrieving an existing invoice
        /// <summary>
        /// 
        
        public Invoice(int invoiceID, int bookingID, int customerID, DateTime? invoiceDate, decimal totalAmount, decimal? amountPaid, int generatedByEmployeeID, InvoiceStatusEnum invoiceStatus, Booking? booking = null, Customer? customer = null, Employee? employee = null)
        {
            InvoiceID = invoiceID;
            BookingID = bookingID;
            CustomerID = customerID;
            InvoiceDate = invoiceDate;
            TotalAmount = totalAmount;
            AmountPaid = amountPaid;
            GeneratedByEmployeeID = generatedByEmployeeID;
            this.InvoiceStatus = invoiceStatus;
            this.booking = booking;
            this.customer = customer;
            this.employee = employee;
        }

        public Invoice()
        {
        }


    }
}
