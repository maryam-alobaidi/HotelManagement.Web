using HotelManagement.Domain.Entities;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.ComponentModel.DataAnnotations;

namespace HotelManagement.Web.Models.ViewModels.InvoiceModel
{
    public class InvoiceCreateEditViewModel
    {
        //[Display(Name = "Invoice ID")]
        //public int InvoiceID { get; set; }

        //// BookingID is a crucial link and must be provided.
        //[Display(Name = "Booking ID")]
        //[Required(ErrorMessage = "Booking ID is required.")]
        //[Range(1, int.MaxValue, ErrorMessage = "Booking ID must be a positive integer.")]
        //public int BookingID { get; set; }

        //// CustomerID is required to link the invoice to a customer.
        //[Display(Name = "Customer ID")]
        //[Required(ErrorMessage = "Customer ID is required.")]
        //[Range(1, int.MaxValue, ErrorMessage = "Customer ID must be a positive integer.")]
        //public int CustomerID { get; set; }

        //// InvoiceDate is required and should be a valid date.
        //[Display(Name = "Invoice Date")]
        //[DataType(DataType.Date)]
        //public DateTime InvoiceDate { get; set; } = DateTime.Now;

        //// TotalAmount is required and must be a positive value.
        //[Display(Name = "Total Amount")]
        //[Required(ErrorMessage = "Total amount is required.")]
        //[Range(0.01, double.MaxValue, ErrorMessage = "Total amount must be greater than zero.")]
        //[DataType(DataType.Currency)]
        //public decimal TotalAmount { get; set; }

        //// AmountPaid is required and must be a non-negative value.
        //// It can be 0 initially.
        //[Display(Name = "Amount Paid")]
        //[Range(0.00, double.MaxValue, ErrorMessage = "Amount paid must be a non-negative value.")]
        //[DataType(DataType.Currency)]
        //public decimal AmountPaid { get; set; }

        //// BalanceDue is a read-only property, calculated automatically.
        //// It should not have a 'set' accessor because it's not a field for user input.
        //[Display(Name = "Balance Due")]
        //[DataType(DataType.Currency)]
        //public decimal BalanceDue => TotalAmount - AmountPaid;

        //// GeneratedByEmployeeID is required to track which employee created the invoice.
        //[Display(Name = "Generated By Employee ID")]
        //[Required(ErrorMessage = "Employee ID is required.")]
        //[Range(1, int.MaxValue, ErrorMessage = "Employee ID must be a positive integer.")]
        //public int GeneratedByEmployeeID { get; set; }


        //[Display(Name = "Invoice Status")]
        //[Required(ErrorMessage = "Invoice status is required.")]
        //public string InvoiceStatus { get; set; }  

        //public Booking? booking { get; set; }



        //public IEnumerable<SelectListItem>? Bookings { get; set; }
        //public IEnumerable<SelectListItem>? Customers { get; set; }
        //public IEnumerable<SelectListItem>? Employees { get; set; }


        public List<SelectListItem> Bookings { get; set; } = new List<SelectListItem>();

        // هذه الخاصية ستحمل قيمة رقم الحجز الذي اختاره المستخدم
        [Display(Name = "Booking")]
        [Required(ErrorMessage = "Please select a booking.")]
        public int BookingID { get; set; }

        // الخصائص الأخرى الخاصة بالفاتورة
        public int InvoiceID { get; set; }

        [Display(Name = "Customer")]
        public string? CustomerName { get; set; }
        public int? CustomerID { get; set; }

        [Display(Name = "Employee")]
        public string? EmployeeName { get; set; }
        public int? GeneratedByEmployeeID { get; set; }

        [Display(Name = "Invoice Date")]
        [Required(ErrorMessage = "Invoice date is required.")]
        [DataType(DataType.Date)]
        public DateTime InvoiceDate { get; set; } = DateTime.Now;

        [Display(Name = "Total Amount")]
        [Required(ErrorMessage = "Total amount is required.")]
        [Range(0, 999999.99, ErrorMessage = "Total amount must be a positive value.")]
        [DataType(DataType.Currency)]
        public decimal TotalAmount { get; set; }

      
        [Display(Name = "Amount Paid")]
        [Required(ErrorMessage = "Amount paid is required.")]
        [Range(0, 999999.99, ErrorMessage = "Amount paid must be a positive value.")]
        [DataType(DataType.Currency)]
        public decimal AmountPaid { get; set; }

        // This is a computed property that calculates the balance due.
        // It does not need to be saved to the database.
        [Display(Name = "Balance Due")]
        [DataType(DataType.Currency)]
        public decimal BalanceDue => TotalAmount - AmountPaid;

        [Display(Name = "Invoice Status")]
        public string InvoiceStatus { get; set; } = "UnPaid";

    

    }
}
