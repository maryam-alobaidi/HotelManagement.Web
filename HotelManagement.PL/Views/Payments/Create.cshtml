@model HotelManagement.Web.Models.ViewModels.PaymentModel.PaymentCreateViewModel
@{
    ViewData["Title"] = "Create Payment";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Load Tailwind CSS -->
<script src="https://cdn.tailwindcss.com"></script>
<!-- Set Inter font for a consistent look -->
<style>
    body {
        font-family: 'Inter', sans-serif;
    }
</style>

<div class="flex items-center justify-center min-h-screen bg-gray-100 p-4">
    <div class="w-full max-w-2xl bg-white rounded-2xl shadow-2xl p-8 space-y-8 border border-gray-200">
        <h1 class="text-4xl font-extrabold text-center text-gray-800">Create New Payment</h1>

        <hr class="border-gray-300">

        <form asp-action="Create" class="space-y-6">
            <div asp-validation-summary="ModelOnly" class="text-red-600 text-center font-medium mb-4"></div>

            <!-- Booking Dropdown -->
            <div class="flex flex-col">
                <label asp-for="BookingID" class="mb-2 text-base font-medium text-gray-700">Select Booking</label>
                <select asp-for="BookingID" asp-items="Model.UnpaidBookings" id="bookingDropdown"
                        class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out bg-white appearance-none pr-8">
                    <option value="">-- Select a Booking --</option>
                </select>
                <span asp-validation-for="BookingID" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Invoice Dropdown (Dynamically Populated) -->
            <div class="flex flex-col">
                <label asp-for="InvoiceID" class="mb-2 text-base font-medium text-gray-700">Select Invoice</label>
                <select asp-for="InvoiceID" asp-items="Model.InvoiceList" id="invoiceDropdown"
                        class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out bg-white appearance-none pr-8">
                    <option value="">-- Select an Invoice --</option>
                </select>
                <span asp-validation-for="InvoiceID" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Amount Input -->
            <div class="flex flex-col">
                <label asp-for="Amount" class="mb-2 text-base font-medium text-gray-700">Amount</label>
                <input asp-for="Amount" type="number" step="0.01" id="amountInput"
                       class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out"
                       placeholder="Amount will appear here automatically">
                <span asp-validation-for="Amount" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Payment Method Dropdown -->
            <div class="flex flex-col">
                <label asp-for="PaymentMethodID" class="mb-2 text-base font-medium text-gray-700">Payment Method</label>
                <select asp-for="PaymentMethodID" asp-items="Model.PaymentMethodList"
                        class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out bg-white appearance-none pr-8">
                    <option value="">-- Select Method --</option>
                </select>
                <span asp-validation-for="PaymentMethodID" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Employee Dropdown -->
            <div class="flex flex-col">
                <label asp-for="RecordedByEmployeeID" class="mb-2 text-base font-medium text-gray-700">Recorded By Employee</label>
                <select asp-for="RecordedByEmployeeID" asp-items="Model.EmployeeList"
                        class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out bg-white appearance-none pr-8">
                    <option value="">-- Select Employee --</option>
                </select>
                <span asp-validation-for="RecordedByEmployeeID" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Transaction Reference Input -->
            <div class="flex flex-col">
                <label asp-for="TransactionReference" class="mb-2 text-base font-medium text-gray-700">Transaction Reference</label>
                <input asp-for="TransactionReference"
                       class="p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-4 focus:ring-blue-500/50 transition duration-300 ease-in-out"
                       placeholder="Optional">
                <span asp-validation-for="TransactionReference" class="text-red-600 text-sm mt-1"></span>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-center mt-8">
                <button type="submit" class="w-full px-6 py-4 bg-blue-600 text-white font-bold rounded-lg shadow-lg hover:bg-blue-700 transform hover:scale-105 transition duration-300 ease-in-out focus:outline-none focus:ring-4 focus:ring-blue-500/50">
                    Create Payment
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get elements by their IDs
            const bookingDropdown = document.getElementById('bookingDropdown');
            const invoiceDropdown = document.getElementById('invoiceDropdown');
            const amountInput = document.getElementById('amountInput');

            // Handle booking dropdown change
            bookingDropdown.addEventListener('change', async function () {
                const bookingId = this.value;
                invoiceDropdown.innerHTML = '<option value="">Loading invoices...</option>';
                amountInput.value = ''; // Clear the amount field

                if (bookingId) {
                    try {
                        const url = `@Url.Action("GetInvoicesByBooking", "Payments")?bookingId=${bookingId}`;
                        const response = await fetch(url);
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        const invoices = await response.json();

                        invoiceDropdown.innerHTML = '<option value="">-- Select an Invoice --</option>';
                        if (invoices.length > 0) {
                            invoices.forEach(invoice => {
                                const option = document.createElement('option');
                                option.value = invoice.value;
                                option.textContent = invoice.text;
                                invoiceDropdown.appendChild(option);
                            });
                        } else {
                            invoiceDropdown.innerHTML = '<option value="">-- No Invoices Found --</option>';
                        }
                    } catch (error) {
                        console.error('Fetch error:', error);
                        invoiceDropdown.innerHTML = '<option value="">-- Error Loading Invoices --</option>';
                    }
                } else {
                    invoiceDropdown.innerHTML = '<option value="">-- Select an Invoice --</option>';
                }
            });

            // Handle invoice dropdown change
            invoiceDropdown.addEventListener('change', async function () {
                const invoiceId = this.value;
                amountInput.value = ''; // Reset amount when a new invoice is selected

                if (invoiceId) {
                    try {
                        const url = `@Url.Action("GetInvoiceDetails", "Payments")?invoiceId=${invoiceId}`;
                        const response = await fetch(url);
                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        const details = await response.json();

                        // Automatically fill the amount field with the balance due
                        if (details && details.balanceDue !== undefined) {
                           amountInput.value = details.balanceDue.toFixed(2);
                        } else {
                           amountInput.value = '';
                        }
                    } catch (error) {
                        console.error('Fetch error:', error);
                    }
                }
            });
        });
    </script>
}
